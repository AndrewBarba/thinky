{"name":"Thinky","tagline":"JavaScript ORM for RethinkDB","body":"### Quick start \r\n\r\nInstall:\r\n```\r\nnpm install thinky\r\n```\r\n\r\nUse\r\n```javascript\r\nvar thinky = require('thinky');\r\nthinky.init({});\r\n\r\n// Create a model\r\nvar Cat = thinky.createModel('Cat', {name: String}); \r\n\r\n// Create custom methods\r\nCat.define('hello', function() { console.log(\"Hello, I'm \"+this.name) });\r\n\r\n// Create a new object\r\nkitty = new Cat({name: 'Kitty'});\r\nkitty.hello(); // Log \"Hello, I'm Kitty\r\nkitty.save(function(err, result) {\r\n    if (err) throw err;\r\n    console.log(\"Kitty has been saved in the database\");\r\n})\r\n```\r\n\r\n### Docs\r\n_Note_: Work in progress. \r\n\r\n#### Thinky\r\n\r\n__Thinky.init(__ options __)__\r\n\r\noptions (object): object with the fields\r\n\r\n- host: RethinkDB host (default \"localhost\")\r\n- port: RethinkDB port for client (default to 28015)\r\n- db: default database (default to \"test\")\r\n- poolMax: The maximum number of connections in the pool (default to 10)\r\n- poolMin: The minimum number of connections in the pool (default to 1)\r\n- enforce: represents if the schemas should be enforced or not. Its value can be:\r\n    - an object with the 3 fields:\r\n        - missing -- throw on missing fields -- default to false\r\n        - extra -- throw if extra fields are provided -- default to false\r\n        - type -- throw if the type is not the one expected -- default to true\r\n    - a boolean that set all 3 parameters to the same value\r\n\r\n\r\n__Thinky.getOptions()__  \r\n\r\nReturns all the options previously set.\r\n\r\n\r\n\r\n__Thinky.getOption(__ optionName __)__  \r\n\r\nReturns the value for _optionName_. Possible values:\r\n\r\n- host: RethinkDB host\r\n- port: RethinkDB port for client\r\n- db: default database\r\n- poolMax: The maximum number of connections in the pool\r\n- poolMin: The minimum number of connections in the pool\r\n- enforce: Boolean that represent if the schemas should be enforced or not\r\n\r\n\r\n\r\n__Thinky.setOptions(__ options __)__\r\n\r\nOverwrite the options defined in _options_.\r\n\r\nThe argument _options_ is an object that can have the following fields\r\n\r\n- host: RethinkDB host (default \"localhost\")\r\n- port: RethinkDB port for client (default to 28015)\r\n- db: default database (default to \"test\")\r\n- poolMax: The maximum number of connections in the pool (default to 10)\r\n- poolMin: The minimum number of connections in the pool (default to 1)\r\n- enforce: represents if the schemas should be enforced or not. Its value can be:\r\n    - an object with the 3 fields:\r\n        - missing -- throw on missing fields -- default to false\r\n        - extra -- throw if extra fields are provided -- default to false\r\n        - type -- throw if the type is not the one expected -- default to true\r\n    - a boolean that set all 3 parameters to the same value\r\n\r\nSetting a value to `null` will delete the value and the default value will be used.\r\n\r\n_Note_: Changing the host/port/poolMax/poolMin will create a new pool (the previous one will be drained).  \r\nThis behavior will be fixed when generic pool will be able to resize the pool at will (or when I'll fork it)\r\n\r\n\r\n\r\n__Thinky.disconnect()__\r\n\r\nClose all the connections.\r\n\r\n\r\n\r\n__Thinky.createModel(__ name, schema, settings __)__\r\n\r\nCreate a new model\r\n\r\n- name: name of the model\r\n- schema: An object which fields can map to the following value\r\n    - String\r\n    - Number\r\n    - Boolean\r\n    - Array with one type (like [String], [Number], [{name: String, age: Number}]\r\n    - Object that contains a valid schema\r\n    - {\\_type: String, enforce: { missing: _boolean_, type: _boolean_, extra: _boolean_}, default: _value/function_ }\r\n    - {\\_type: Number, enforce: { missing: _boolean_, type: _boolean_, extra: _boolean_}, default: _value/function_ }\r\n    - {\\_type: Boolean, enforce: { missing: <boolean_, type: _boolean_, extra: _boolean_}, default: _value/function_ }\r\n    - {\\_type: Array, schema: _schema_, enforce: { missing: _boolean_, type: _boolean_, extra: _boolean_}, default: _value/function_ }\r\n    - {\\_type: Object, schama: _schema_, enforce: { missing: _boolean_, type: _boolean_, extra: _boolean_}, default: _value/function_ }\r\n- settings (object): settings for the model\r\n    - enforce: represents if the schemas should be enforced or not. Its value can be:\r\n        - an object with the 3 fields:\r\n            - missing -- throw on missing fields -- default to false\r\n            - extra -- throw if extra fields are provided -- default to false\r\n            - type -- throw if the type is not the one expected -- default to true\r\n        - a boolean that set all 3 parameters to the same value\r\n\r\n_Note 1_: the fields enforce and default are optional.  \r\n_Note 2_: the value of enforce is the lower one (thinky -> model -> field).  \r\n_Note 3_: if enforce is provided as an object, the three fields missing/extra/type have to be defined. This limitation will be lifted when more important issues will be solved.  \r\n_Note 4_: you currently cannot have a field named _type in your model. This limitation will be removed at some point.  \r\n\r\nExamples of valid schema:\r\n\r\n```\r\n{ name: String }\r\n{ name: { _type: String } }\r\n{ name: { _type: String, default: \"Unknown name\" } }\r\n{ age: { _type: Number, default: function() { return Math.random()*100 } } }\r\n{ name: {_type: String, enforce: { missing: false, extra: false, type: true } }, age: { _type: Number, enforce: { missing: false, extra: false, type: true } }\r\n{ user: { name: String, age: Number }}\r\n{ comments: [ {author: String, comment: String} ] }\r\n{ comments: {_type: Array, schema: {author: String, comment: String} } }\r\n```\r\n\r\n_Note:_ The settings to set a minimum/maximum of elements in an array is on the roadmap.\r\n\r\n\r\n#### Model\r\n__Model.compile(__ name, schema, settings, thinky __)__\r\n\r\n_Internal method_\r\n\r\n\r\n\r\n__Model.createBasedOnSchema(__ result, doc, originalDoc, enforce, prefix, schema __)__\r\n\r\n_Internal method_\r\n\r\n\r\n\r\n__Model.checkType(__ result, doc, originalDoc, schema, key, type, typeOf, prefix, enforce __)__\r\n\r\n_Internal method_\r\n\r\n\r\n\r\n__Model.define(__ key, method, force __)__\r\n\r\nDefine a _method_ on the model with the name _key_.\r\nThis method can be called by any instances of the model, whether the instances were created\r\nbefore or after the definition of the method.\r\n\r\n_Note_: If a method already exists with such name, an error will be thrown except if you pass force=true.  \r\nWe still recommand not to overwrite a method since it may be an internal one and can trigger an undefined behavior.\r\n\r\n\r\n__Model.setSchema(__ schema __)__\r\n\r\nChange the schema.\r\n\r\n_Note_: When you change the schema, the instances previously created do not change.\r\nWe do not keep a reference of all objects now. We may add an option to do it later. \r\n\r\n\r\n__Model.getSettings(__  __)__\r\n\r\nReturn the settings of the model.\r\n\r\n\r\n\r\n__Model.getPrimaryKey(__  __)__\r\n\r\nReturn the primary key of the model.\r\n\r\n\r\n\r\n__Model.get(__ id or [ids], callback __)__\r\n\r\nRetrieve one or more documents using their primary keys.\r\n\r\n\r\n__Model.getAll(__ value or [values], indexName, callback __)__\r\n\r\nRetrieve one or more documents using a secondary index\r\n\r\n\r\n__Model.filter(__ filterFunction  __)__\r\n\r\nRetrieve document based on the filter.\r\n\r\n\r\n__Model.count(__  __)__\r\n\r\nReturn the number of element in the table of your model.\r\n\r\n\r\n__Model.addListener(__ event, listener __)__\r\n\r\nAdd a listener on the model. Everytime a new instance will be created, the listeners defined on the model\r\nwill be added to the document.\r\n\r\n_Note_: Previously created document will not have such listeners.\r\n\r\n__Model.on(__ event, listener __)__\r\n\r\nAlias for addListener\r\n\r\n\r\n__Model.once(__ event, listener __)__\r\n\r\nAdd a listener on the model. Everytime a new instance will be created, the listeners defined on the model\r\nwill be added to the document. Such listener can be triggered only once per document.\r\n\r\n\r\n__Model.off(__ event, listener __)__\r\n\r\nRemove the listener bound to the event.\r\n\r\n- If only the event is passed, all listeners of this event will be removed.\r\n- If the event passed is a listener, this listener will be removed from all events.\r\n- If no argument is supplied, all events/listeners are removed.\r\n\r\n\r\n__Model.listeners(__ event, raw __)__\r\n\r\nReturn all the listeners for this event. These listeners can be\r\n- The listeners passed in `addListener/on`\r\n- Object like this one:\r\n```\r\n{\r\n    once: true,\r\n    listener: listener\r\n}\r\n```\r\n\r\nIf `raw` is set to false (default is true), the objects are replaced by the listener they contain.\r\n\r\n\r\n#### Document\r\n\r\n\r\n__Document.getDocument(__  __)__\r\n\r\n_Internal method_\r\n\r\n\r\n\r\n__Document.getModel(__  __)__\r\n\r\nReturn the model of the document.\r\n\r\n\r\n\r\n__Document.getSettings(__  __)__\r\n\r\nReturn the settings of the document.\r\n\r\n\r\n__Document.definePrivate(__ name, method  __)__\r\n\r\nDefine a method accessible through the key _name_.\r\n\r\nThe method will be accessible only by the document iself and not any other documents (including\r\nthose in the same class).\r\n\r\n\r\n\r\n__Document.save(__ callback __)__\r\n\r\nSave the object in the database. Thinky will call insert or update depending\r\non whether how the object was created.\r\n\r\nThe event 'save' is triggered if the document is saved.\r\n\r\n\r\n__Document.merge(__ newDoc, replace __)__\r\n\r\nMerge newDoc in the document.\r\nIf _replace_ is set to _true_, the document will be replaced.\r\n\r\nThe event 'change' is triggered if the document is changed.\r\n\r\n_Note_: The new document is checked agains the schema of the model.\r\n\r\n\r\n__Document.addListener(__ event, listener __)__\r\n\r\nAdd a _listener_ for an event.  \r\n\r\n_Method from events.EventEmitter._\r\n\r\n\r\n__Document.on(__ event, listener __)__\r\n\r\nAlias for Document.addListener.  \r\n\r\n_Method from events.EventEmitter._\r\n\r\n\r\n__Document.once(event, listener)\r\n\r\nAdd a _listener_ for an event that is going to be removed once it is triggered once.  \r\n\r\n_Method from events.EventEmitter._\r\n\r\n\r\n__Document.removeListener(__ event, listener __)__\r\n\r\nRemove a listener for an event.  \r\n\r\n_Method from events.EventEmitter._\r\n\r\n\r\n__Document.off(__event, listener __)__\r\n\r\nIf no argument is provided to `off()`, all listeners of the document will be removed.  \r\nIf only an event is provided, all listeners for this event will be removed.  \r\nIf an event and a listener are provided, the listener will be removed from the event provided.\r\n\r\n\r\n__Document.removeAllListeners(__ event __)__\r\n\r\nRemove all listeners for the events provided.  \r\nIf no event is provided, all listeners will be removed.\r\n\r\n_Method from events.EventEmitter._\r\n\r\n\r\n__Document.setMaxListeners(__ n __)__\r\n\r\nSet the maximum of listeners. \r\n\r\n_Method from events.EventEmitter._\r\n\r\n\r\n__Document.listeners(__ event __)__\r\n__Document.emit(event, [arg1], [arg2], [...])\r\n\r\n\r\n\r\n\r\n### Run the tests\r\n\r\n```\r\nmocha\r\n```\r\n\r\n### Contribute\r\nYou are welcome to do a pull request.\r\n\r\n\r\n### TODO\r\n- Add events methods on Model\r\n- Add more complex queries\r\n- Decide what to do with null (does it throw when checked against a Number?)\r\n- Joins\r\n- Premises?\r\n- Do not drain the pool when poolMin/poolMax are changed\r\n- Write examples\r\n\r\n### About\r\nAuthor: Michel Tu -- orphee@gmail.com -- www.justonepixel.com\r\n\r\n### License\r\nCopyright (c) 2013 Michel Tu <orphee@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this\r\nsoftware and associated documentation files (the 'Software'), to deal in the Software\r\nwithout restriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to permit\r\npersons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or\r\nsubstantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\r\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\r\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\nDEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}